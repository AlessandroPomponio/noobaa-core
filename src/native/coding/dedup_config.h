#ifndef NOOBAA__DEDUP_CONFIG__H
#define NOOBAA__DEDUP_CONFIG__H

#include "../util/common.h"
#include "../util/rabin_fingerprint.h"
#include "dedup.h"

namespace noobaa {

/*
 *
 * DedupConfig
 *
 * Node.js object that holds dedup configuration
 *
 */
class DedupConfig : public Nan::ObjectWrap
{
public:
    static NAN_MODULE_INIT(setup);

private:
    static Nan::Persistent<v8::Function> _ctor;
    static NAN_METHOD(new_instance);

public:
    typedef uint64_t T;
    typedef GF2<T> GF;
    typedef RabinFingerprint<GF> RabinHasher;
    typedef Dedup<RabinHasher> Deduper;

private:
    explicit DedupConfig(
        int gf_degree,
        T gf_poly,
        int window_len,
        int min_chunk,
        int max_chunk,
        int avg_chunk_bits,
        T avg_chunk_val
    )
        // init the Galois-Field generated by a primitive polynomial
        // which is used for rabin hashing.
        // the choice of polynom affects performance so usually better to have fewer set bits.
        // the degree is should be up to the size of the type used for computation (uint64_t).
        : gf(gf_degree, gf_poly)
        // rabin hasher uses the window length when removing the bytes that drop out of the window
        , rabin_hasher(gf, window_len)
        // the dedup configuration
        , deduper(
            rabin_hasher,
            window_len,
            min_chunk,
            max_chunk,
            avg_chunk_bits,
            avg_chunk_val)
    {
    }

    virtual ~DedupConfig()
    {
    }

public:
    GF gf;
    RabinHasher rabin_hasher;
    Deduper deduper;

    // TODO load values from wrapper
    static const int GF_DEGREE = 63; // high degree to allow higher AVG_CHUNK_BITS in the future
    static const T GF_POLY = 0x3;
    static const int WINDOW_LEN = 64; // limit the context of the fingerprint to 64 bytes window
    static const int MIN_CHUNK = 3 * 128 * 1024;
    static const int MAX_CHUNK = 6 * 128 * 1024;
    static const int AVG_CHUNK_BITS = 17; // 128K above MIN
    static const T AVG_CHUNK_VAL = ~T(0); // arbitrary fixed value
};

} // namespace noobaa

#endif // NOOBAA__DEDUP_CONFIG__H
